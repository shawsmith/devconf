# JOE syntax highlight file for C

# A (deterministic) state machine which performs lexical analysis of C.
# (This is the "assembly language" of syntax highlighting.  A separate
# program could be used to convert a regular expression NFA syntax into this
# format).

# Each state begins with ':<name> <color-name>'
# <color-name> is the color used for characters eaten by the state
# (really a symbol for a user definable color).

# The first state defined is the initial state.

# Within a state, define transitions (jumps) to other states.  Each
# jump has the form: <character-list> <target-state> [<option>s]

# There are two ways to specify <character-list>s, either * for any
# character not otherwise specified, or a literal list of characters within
# quotes (ranges and escape sequences allows).  When the next character
# matches any in the list, a jump to the target-state is taken and the
# character is eaten (we advance to the next character of the file to be
# colored).
#
# The * transition should be the first transition specified in the state.
#
# There are several options:
#   noeat       do not eat the character, instead feed it to the next state
#               (this tends to make the states smaller, but be careful: you
#       can make infinite loops).
#
#   recolor=-N  Recolor the past N characters with the color of the
#       target-state.  For example once /* is recognized as the
#       start of C comment, you want to color the /* with the C
#       comment color.
#
#   buffer      start copying characters to a buffer, beginning with this
#       one (it's ok, to not terminate buffering with a matching
#       'strings' option- the buffer is limited to leading 19
#       characters).
#
#   strings A list of strings follows.  If the buffer matches any of the
#       given strings, a jump to the target-state in the string list
#       is taken instead of the normal jump.
#
#   istrings    Same as strings, but case is ignored.
#
#   The format of the string list is:
#
#      "string"   <target-state>
#      "string"   <target-state>
#      done
#
# Weirdness: only states have colors, not transitions.  This means that you
# sometimes have to make dummy states with '* next-state noeat' just to get
# a color specification.

# Define no. sync lines
# You can say:
# -200     means 200 lines
# -        means always start parsing from beginning of file when we lose sync
#          if nothing is specified, the default is -50
# THIS SETTING IS IGNORED BY Ad-hoc programming editor for DOSBox.
-3000


# Define colors
#
# Colors 
# white cyan magenta blue yellow green red black
# bg_white bg_cyan bg_magenta bg_blue bg_yellow bg_green bg_red bg_black
# THIS SETTING IS DIFFERENT IN Ad-hoc programming editor for DOSBox.
# OUR COLORS ARE 8-BIT HEXADECIMAL NUMBERS:
#   IRGBirgb
#   \\\\\\\\_bit 0: blue for foreground
#    \\\\\\\_bit 1: green for foreground
#     \\\\\\_bit 2: red for foreground
#      \\\\\_bit 3: intensity bit for foreground
#       \\\\_bit 4: blue for background
#        \\\_bit 5: green for background
#         \\_bit 6: red for background
#          \_bit 7: intensity bit for background
# For example, 03 = black background, cyan foreground.



=Background    	black / bg_black
=CPreproc 		cyan
=CPreprocKW 		bold cyan
=CPreproc_cKW	bold cyan
=CPreproc_sym	bold blue
=CPreprocCComment	yellow
=CPreprocUnknown	bold cyan / bg_blue
=OpenMP			green
=OpenMPkw		bold green
=OpenMPkw2		bold green
=OpenMPcomment	yellow
=OpenMPnonkw	red / bg_green
=OpenMP_space	bold cyan
=CComment		bold red
=Special		cyan
=Special2		green
=GlueColor		cyan
=AssignColor	bold green
=Numeric		bold blue
=InvalidNumber	bold magenta / bg_red
=NumericSuffix	magenta
=String			bold green
=StringContent	green
=WString		bold blue
=WStringContent	cyan
=Char			bold magenta
=CharContent	magenta
=WChar			bold blue
=WCharContent	cyan
=AbruptStringTermination	bold green / bg_red
=CKeyword		bold white
=CType			bold white
=STLkw			bold white
=Identifier		white
=Mystery		bold green / bg_red
=TrailingSpace	black / bg_cyan


########################
# The rules begin here.
:newline Background
    *       idle noeat
    "#"     pre_hash recolor=-1
    " \t"   newline_space
:newline_space Background
    *       newline noeat
    "\n"        trailing_space recolor=-2

:pre_hash CPreprocKW
    *       pre noeat
:pre CPreproc
    *       preident recolor=-1 buffer
    "/"     pre1_slash recolor=-1
    " \t"       pre
    "\n"        newline
:preident CPreprocUnknown
    *       preproc noeat strings
    "define"    preproc_known
    "elif"      preproc_known
    "else"      preproc_known
    "endif"     preproc_known
    "error"     preproc_known
    "if"        preproc_known
    "ifdef"     preproc_known
    "ifndef"    preproc_known
    "include"   preproc_known
    "include_next"  preproc_known
    "line"      preproc_known
    "pragma"    preproc_pragma
    "undef"     preproc_known
    "warning"   preproc_known
done
    "a-z$0-9A-Z_"   preident

# CPreprocessor directives that begin with an actual keyword
:preproc_known CPreprocKW
    *       preproc noeat
:preproc CPreproc
    *       preproc
    " \t"   preproc_space
    "\n"        newline
    "a-z$A-Z_"  preproc_ident recolor=-1 buffer
    "-()?~[]{},;:!<>=+*%&|^" preproc_sym recolor=-1 noeat
    "/"         pre2_slash recolor=-1
    "\""        pre2_string recolor=-1
    "'"     pre2_char recolor=-1
    "\\"        preproc_cont recolor=-1
:preproc_space CPreproc
    *       preproc noeat
    "\n"        trailing_space recolor=-2
:preproc_sym CPreproc_sym
    *       preproc
:preproc_cont CPreproc_sym
    *       preproc_cont
    "\n"        preproc_newline
:preproc_newline Background
    *       preproc noeat
    " \t"   preproc_newline_space
:preproc_newline_space CPreproc
    *       preproc_newline noeat
    "\n"        trailing_space recolor=-2
:preproc_ident CPreproc
    *       preproc noeat strings
    "auto"      preproc_ident_known
    "char"      preproc_ident_known
    "const"     preproc_ident_known
    "decltype"  preproc_ident_known
    "double"    preproc_ident_known
    "enum"      preproc_ident_known
    "extern"    preproc_ident_known
    "float"     preproc_ident_known
    "inline"    preproc_ident_known
    "int"       preproc_ident_known
    "long"      preproc_ident_known
    "register"  preproc_ident_known
    "short"     preproc_ident_known
    "signed"    preproc_ident_known
    "static"    preproc_ident_known
    "struct"    preproc_ident_known
    "typedef"   preproc_ident_known
    "union"     preproc_ident_known
    "unsigned"  preproc_ident_known
    "void"      preproc_ident_known
    "volatile"  preproc_ident_known
    "break"     preproc_ident_known
    "case"      preproc_ident_known
    "continue"  preproc_ident_known
    "default"   preproc_ident_known
    "do"        preproc_ident_known
    "else"      preproc_ident_known
    "for"       preproc_ident_known
    "goto"      preproc_ident_known
    "if"        preproc_ident_known
    "return"    preproc_ident_known
    "sizeof"    preproc_ident_known
    "switch"    preproc_ident_known
    "while"     preproc_ident_known
    "bitand"    preproc_ident_known   #c++
    "bitor"     preproc_ident_known   #c++
    "catch"     preproc_ident_known   #c++
    "compl"     preproc_ident_known   #c++
    "delete"        preproc_ident_known   #c++
    "explicit"  preproc_ident_known   #c++
    "export"    preproc_ident_known   #c++
    "false"     preproc_ident_known   #c++
    "friend"        preproc_ident_known   #c++
    "namespace"     preproc_ident_known   #c++
    "new"           preproc_ident_known   #c++
    "not"       preproc_ident_known   #c++
    "not_eq"    preproc_ident_known   #c++
    "operator"  preproc_ident_known   #c++
    "or"        preproc_ident_known   #c++
    "or_eq"     preproc_ident_known   #c++
    "private"   preproc_ident_known   #c++
    "protected" preproc_ident_known   #c++
    "public"    preproc_ident_known   #c++
    "throw"     preproc_ident_known   #c++
    "true"      preproc_ident_known   #c++
    "try"       preproc_ident_known   #c++
    "using"         preproc_ident_known   #c++
    "virtual"   preproc_ident_known   #c++
    "xor"       preproc_ident_known   #c++
    "xor_eq"    preproc_ident_known   #c++
done
    "a-z$A-Z0-9_"   preproc_ident
:preproc_ident_known CPreproc_cKW
    *       preproc noeat

:pre2_slash CPreproc_sym
    *       preproc recolor=-1
    "*"     pre2_comment        recolor=-2
    "/"     pre2_line_comment   recolor=-2
:pre2_comment CPreprocCComment
    *       pre2_comment
    "*"     pre2_comment_maybe_end
:pre2_comment_maybe_end CPreprocCComment
    *       pre2_comment
    "/"     preproc
    "*"     pre2_comment_maybe_end
:pre2_line_comment CPreprocCComment
    *       pre2_line_comment
    "\\"        pre2_line_comment_escape
    "\n"        newline
:pre2_line_comment_escape CPreprocCComment
    *       pre2_line_comment
:pre2_string CPreproc_sym
    *       pre2_string
    "\""        preproc
    "\\"        pre2_string_escape
:pre2_string_escape CPreproc_sym
    *       pre2_string
:pre2_char CPreproc_sym
    *       pre2_char
    "'"     preproc
    "\\"        pre2_char_escape
:pre2_char_escape CPreproc_sym
    *       pre2_char

# CPreprocessor directives that just begin with #, no keyword
:pre1_slash CPreprocUnknown
    *       pre recolor=-1
    "*"     pre1_comment        recolor=-2
    "/"     pre1_line_comment   recolor=-2
:pre1_comment CPreprocCComment
    *       pre1_comment
    " "     pre1_comment_space
    "*"     pre1_comment_maybe_end
:pre1_comment_space CPreprocCComment
    *       pre1_comment noeat
    "\n"        pre1_comment_trailing_space recolor=-2
:pre1_comment_trailing_space TrailingSpace
    *       pre1_comment noeat
:pre1_comment_maybe_end CPreprocCComment
    *       pre1_comment
    "/"     pre
    "*"     pre1_comment_maybe_end
:pre1_line_comment CPreprocCComment
    *       pre1_line_comment
    "\\"        pre1_line_comment_escape
    "\n"        newline
:pre1_line_comment_escape CPreprocCComment
    *       pre1_line_comment


# Special care about OpenMP #pragma constructs
:preproc_pragma CPreprocKW
    *       preproc_pragma0 noeat
:preproc_pragma0 CPreproc
    *       preproc noeat
    " "     preproc_pragma0
    "o"     openmp1
:openmp1 CPreproc
    *       preproc noeat
    "m"     openmp2
:openmp2 CPreproc
    *       preproc noeat
    "p"     openmp3
:openmp3 CPreproc
    *       preproc noeat
    " "     openmp_keyword_known recolor=-12

:openmp OpenMP
    *       openmp
    " \t"   openmp_space recolor=-1
    "("     openmp_parens
    "\\"        openmp_cont
    "a-z_"      openmp_keyword recolor=-1 buffer
    "/"     openmp_slash
    "\n"        newline
:openmp_space OpenMP_space
    *       openmp noeat
    "\n"        trailing_space recolor=-2
:openmp_slash OpenMP
    *       openmp
    "*"     openmp_comment recolor=-2
    "/"     openmp_line_comment recolor=-2
:openmp_comment OpenMPcomment
    *       openmp_comment
    "*"     openmp_comment_maybe_end
:openmp_comment_maybe_end OpenMPcomment
    *       openmp_comment
    "*"     openmp_comment_maybe_end
    "/"     openmp
:openmp_line_comment OpenMPcomment
    *       openmp_line_comment
    "\\"        openmp_line_comment_escape
    "\n"        newline
:openmp_line_comment_escape OpenMPcomment
    *       openmp_line_comment

:openmp_parens OpenMP
    *       openmp_parens
    "\\"        openmp_parens_cont
    "/"     openmp_parens_slash
    ")"     openmp
    "\n"        newline
:openmp_cont OpenMP
    *       openmp
:openmp_parens_cont OpenMP
    *       openmp_parens
:openmp_parens_slash OpenMP
    *       openmp_parens noeat
    "*"     openmp_parens_comment recolor=-2
:openmp_parens_comment OpenMPcomment
    *       openmp_parens_comment
    "*"     openmp_parens_comment_maybe_end
:openmp_parens_comment_maybe_end OpenMPcomment
    *       openmp_parens_comment
    "*"     openmp_parens_comment_maybe_end
    "/"     openmp_parens

:openmp_keyword OpenMPnonkw
    *       openmp noeat strings
    "atomic"    openmp_keyword_known2
    "barrier"   openmp_keyword_known2
    "collapse"  openmp_keyword_known
    "copyin"    openmp_keyword_known
    "copyprivate"   openmp_keyword_known
    "critical"  openmp_keyword_known2
    "default"   openmp_keyword_known_do_parens
    "dynamic"   openmp_keyword_known_end_parens
    "firstprivate"  openmp_keyword_known
    "for"       openmp_keyword_known2
    "flush"     openmp_keyword_known2
    "guided"    openmp_keyword_known_end_parens
    "if"        openmp_keyword_known
    "lastprivate"   openmp_keyword_known
    "master"    openmp_keyword_known2
    "nowait"    openmp_keyword_known
    "none"      openmp_keyword_known_end_parens
    "num_threads"   openmp_keyword_known
    "ordered"   openmp_keyword_known2
    "parallel"  openmp_keyword_known2
    "private"   openmp_keyword_known_end_parens
    "reduction" openmp_keyword_known
    "schedule"  openmp_keyword_known_do_parens
    "section"   openmp_keyword_known2
    "sections"  openmp_keyword_known2
    "shared"    openmp_keyword_known_end_parens
    "single"    openmp_keyword_known2
    "static"    openmp_keyword_known_end_parens
    "task"      openmp_keyword_known2
    "taskwait"  openmp_keyword_known
    "threadprivate" openmp_keyword_known
    "untied"    openmp_keyword_known
done
    "a-z0-9A-Z_"    openmp_keyword
:openmp_keyword_known OpenMPkw
    *       openmp noeat
:openmp_keyword_known2 OpenMPkw2
    *       openmp noeat
:openmp_keyword_known_do_parens OpenMPkw
    *       openmp noeat
    "("     openmp_keyword_known_do_parens1 recolor=-1
:openmp_keyword_known_end_parens OpenMPkw
    *       openmp_keyword_known_end_parens1 noeat
:openmp_keyword_known_end_parens1 OpenMP
    *       openmp noeat
    " "     openmp_keyword_known_end_parens1
    ","     openmp_parens
:openmp_keyword_known_do_parens1 OpenMP
    *       openmp_parens noeat
        "a-z_"          openmp_keyword recolor=-1 buffer

# All following states are for when we're not in a preprocessor line

:idle Background
    *       idle_mystery    recolor=-1
    "()?~"      special     recolor=-1
    "[]{},;"    special2    recolor=-1
    ":"     maybe_glue  recolor=-1
    "!<>"       maybe_comp  recolor=-1
    "="     maybe_comp_eq   recolor=-1
    "-+*%&|^"   maybe_op_assign recolor=-1
    " \t"   space       recolor=-1
    "/"     slash       recolor=-1
    "0"     first_digit_0   recolor=-1
    "1-9"       first_digit recolor=-1
    "."     period      recolor=-1
    "\""        stringbegin recolor=-1 noeat
    "'"     charbegin   recolor=-1 noeat
    "a-z$A-Z_"  ident       recolor=-1 buffer
    "L"     maybe_wide      recolor=-1 buffer
    "\n"        newline recolor=-1
:idle_mystery Mystery
    *       idle noeat
:space Background
        *               idle noeat
        "\n"        trailing_space recolor=-2
:trailing_space TrailingSpace
    *       newline noeat

# Delimiters
:special Special
    *       idle noeat
:special2 Special2
    *       idle noeat
:period Special
    *       idle noeat
    ":"     typoed_glue recolor=-2
    "0-9"       float       recolor=-2
:slash Special
    *       idle noeat
    "*"     comment     recolor=-2 # "/*"
    "/"     line_comment    recolor=-2 # "//"
    "="     was_op_assign   recolor=-2 # "/="

# "::"
:maybe_glue Special
    *       idle noeat
    "."     typoed_glue recolor=-2
    ":"     was_glue recolor=-2
:was_glue GlueColor
    *       idle noeat

:typoed_glue InvalidNumber
    *       idle noeat

# "==" vs "="
:maybe_comp_eq AssignColor
    *       idle noeat
    "="     was_comp recolor=-2
# "<=", ">=", "==", "!="
:maybe_comp Special
    *       idle noeat
    "="     was_comp recolor=-2
:was_comp Special
    *       idle noeat

# "+=", "-=", "*=", "/=", "%=", "&=", "|="
:maybe_op_assign Special
    *       idle noeat
    "="     was_op_assign recolor=-2
:was_op_assign AssignColor
    *       idle noeat


# CComments
:comment CComment
    *       comment
    " "     comment_space
    "*"     maybe_end_comment
:comment_space CComment
    *       comment noeat
    "\n"        comment_trailing_space recolor=-2
:comment_trailing_space TrailingSpace
    *       comment noeat
:maybe_end_comment CComment
    *       comment
    "/"     idle
    "*"     maybe_end_comment
:line_comment CComment
    *       line_comment
    "\\"        line_comment_escape
    "\n"        newline recolor=-1
:line_comment_escape CComment
    *       line_comment

# Numeric constants
:first_digit_0 Numeric
    *       first_digit noeat
    "xX"            hex_first
:first_digit Numeric
    *       number_before_e noeat

:hex_first Numeric
    *       end_number_suffix noeat recolor=-2
    "0-9A-Fa-f" hex
    "."     hexfloat
:hex Numeric
    *       end_int noeat
    "0-9A-Fa-f" hex
    "."     hexfloat
    "pP"        epart
:hexfloat Numeric
    *       end_number_suffix noeat recolor=-2
    "0-9A-Fa-f" hexfloat
    "pP"        epart
:number_before_e Numeric
    *       end_int noeat
    "0-9"       number_before_e
    "."     float
    "eE"            epart

:float Numeric
    *       end_float noeat
    "eE"        epart
    "0-9"       float
:epart Numeric
    *       enum_first noeat
    "-+"        enum_first
:enum_first Numeric
    *       end_number_suffix noeat recolor=-2
    "0-9"       enum
:enum Numeric
    *       end_float noeat
    "0-9"       enum
:end_float NumericSuffix
    *       end_number_suffix noeat
    "fFlL"      end_number_suffix #f, #l
:end_int NumericSuffix
    *       end_number_suffix noeat
    "uU"        int_suffix_u    #u
    "lL"        int_suffix_l    #l
:int_suffix_u NumericSuffix
    *       end_number_suffix noeat
    "lL"        int_suffix_ul   #ul
:int_suffix_ul NumericSuffix
    *       end_number_suffix noeat
    "lL"        end_number_suffix #ull
:int_suffix_l NumericSuffix
    *       end_number_suffix noeat
    "uU"        end_number_suffix  #lu
    "lL"        int_suffix_ll   #ll
:int_suffix_ll NumericSuffix
    *       end_number_suffix noeat
    "uU"        end_number_suffix #llu
:end_number_suffix InvalidNumber
    *       idle noeat
    "a-z$A-Z_0-9"   end_number_suffix

# Strings
:stringbegin String
    *       string
:stringend String
    *       idle

:string StringContent
    *       string
    "\""        stringend noeat
    "\\"        string_escape
    "\n"        invalid_string_char_flush recolor=-2
:string_escape StringContent
    *       string
    "\n"        string
    ""       string_escape_ignore noeat
:string_escape_ignore Background
    *       string_escape

:wstringbegin WString
    *       wstring
:wstringend WString
    *       idle

:wstring    WStringContent
    *       wstring
    "\""        wstringend noeat
    "\\"        wstring_escape
    "\n"        invalid_string_char_flush recolor=-2
:wstring_escape WStringContent
    *       wstring
    "\n"        wstring
    ""       wstring_escape_ignore noeat
:wstring_escape_ignore Background
    *       wstring_escape


# Chars
:charbegin Char
    *       char
:charend Char
    *       idle

:char CharContent
    *       char
    "'"     charend noeat
    "\\"        char_escape
    "\n"        invalid_string_char_flush recolor=-2
:char_escape    CharContent
    *       char
    "\n"        char
:char_escape_ignore Background
    *       char_escape

:wcharbegin WChar
    *       wchar
:wcharend WChar
    *       idle
:wchar WCharContent
    *       wchar
    "'"     wcharend noeat
    "\\"        wchar_escape
    "\n"        invalid_string_char_flush recolor=-2
:wchar_escape   WCharContent
    *       wchar
    "\n"        wchar
:wchar_escape_ignore Background
    *       wchar_escape


:maybe_wide Identifier
    *               ident noeat
    "'"     wcharbegin noeat recolor=-2
    "\""        wstringbegin noeat recolor=-2


# This is if a "\n" is met inside a string or char constant.
# It serves two purposes:
#   Helps getting back in sync
#   Minimizes terminal traffic when entering strings
:invalid_string_char_flush AbruptStringTermination
    *       newline noeat

# Special identifiers
:ident Identifier
    *       idle noeat strings
    "auto"      type
    "char"      type
    "const"     type
    "decltype"  type
    "double"    type
    "enum"      type
    "extern"    type
    "float"     type
    "inline"    type
    "int"       type
    "long"      type
    "register"  type
    "short"     type
    "signed"    type
    "static"    type
    "struct"    type
    "typedef"   type
    "union"     type
    "unsigned"  type
    "void"      type
    "volatile"  type
    "bool"          type   #c++
    "class"         type   #c++
    "const_cast"    type   #c++
    "dynamic_cast"  type   #c++
    "mutable"   type   #c++
    "reinterpret_cast" type   #c++
    "static_cast"   type   #c++
    "template"      type   #c++
    "typeid"    type   #c++
    "typename"      type   #c++
    "wchar_t"       type   #c++
    "break"     kw
    "case"      kw
    "continue"  kw
    "default"   kw
    "do"        kw
    "else"      kw
    "for"       kw
    "goto"      kw
    "if"        kw
    "return"    kw
    "sizeof"    kw
    "switch"    kw
    "while"     kw
    "bitand"    kw   #c++
    "bitor"     kw   #c++
    "catch"     kw   #c++
    "compl"     kw   #c++
    "delete"        kw   #c++
    "explicit"  kw   #c++
    "export"    kw   #c++
    "false"     kw   #c++
    "friend"        kw   #c++
    "namespace"     kw   #c++
    "new"           kw   #c++
    "not"       kw   #c++
    "not_eq"    kw   #c++
    "operator"  kw   #c++
    "or"        kw   #c++
    "or_eq"     kw   #c++
    "private"   kw   #c++
    "protected" kw   #c++
    "public"    kw   #c++
    "this"      kw   #c++
    "throw"     kw   #c++
    "true"      kw   #c++
    "try"       kw   #c++
    "using"         kw   #c++
    "virtual"   kw   #c++
    "xor"       kw   #c++
    "xor_eq"    kw   #c++
        "accumulate"               stlkw
        "adjacent_difference"          stlkw
        "adjacent_find"            stlkw
        "advance"              stlkw
        "allocator"            stlkw
        "auto_ptr"             stlkw
        "back_insert_iterator"         stlkw
        "back_inserter"            stlkw
        "basic_string"             stlkw
        "binary_function"          stlkw
        "binary_negate"            stlkw
        "binary_search"            stlkw
        "bind1st"              stlkw
        "bind2nd"              stlkw
        "binder1st"            stlkw
        "binder2nd"            stlkw
        "bitset"               stlkw
        "complex"              stlkw
        "copy"                 stlkw
        "copy_backward"            stlkw
        "count"                stlkw
        "count_if"             stlkw
        "deque"                stlkw
        "distance"             stlkw
        "distance_type"            stlkw
        "divides"              stlkw
        "equal"                stlkw
        "equal_range"              stlkw
        "equal_to"             stlkw
        "exception"            stlkw
        "fill"                 stlkw
        "fill_n"               stlkw
        "find"                 stlkw
        "find_end"             stlkw
        "find_first_of"            stlkw
        "find_if"              stlkw
        "for_each"             stlkw
        "front_insert_iterator"        stlkw
        "front_inserter"           stlkw
        "generate"             stlkw
        "generate_n"               stlkw
        "get_temporary_buffer"         stlkw
        "greater"              stlkw
        "greater_equal"            stlkw
        "includes"             stlkw
        "inner_product"            stlkw
        "inplace_merge"            stlkw
        "insert_iterator"          stlkw
        "inserter"             stlkw
        "istream_iterator"         stlkw
        "iter_swap"            stlkw
        "iterator_category"        stlkw
        "less"                 stlkw
        "less_equal"               stlkw
        "lexicographical_compare"      stlkw
        "limits"               stlkw
        "list"                 stlkw
        "logical_and"              stlkw
        "logical_not"              stlkw
        "logical_or"               stlkw
        "lower_bound"              stlkw
        "make_heap"            stlkw
        "map"                  stlkw
        "max"                  stlkw
        "max_element"              stlkw
        "merge"                stlkw
        "min"                  stlkw
        "min_element"              stlkw
        "minus"                stlkw
        "mismatch"             stlkw
        "modulus"              stlkw
        "move"                 stlkw
        "multimap"             stlkw
        "multiset"             stlkw
        "negate"               stlkw
        "next_permutation"         stlkw
        "not1"                 stlkw
        "not2"                 stlkw
        "not_equal_to"             stlkw
        "nth_element"              stlkw
        "numeric_limits"           stlkw
        "ostream_iterator"         stlkw
        "pair"                 stlkw
        "partial_sort"             stlkw
        "partial_sort_copy"        stlkw
        "partial_sum"              stlkw
        "partition"            stlkw
        "permutation"              stlkw
        "plus"                 stlkw
        "pointer_to_binary_function"       stlkw
        "pointer_to_unary_function"    stlkw
        "pop_heap"             stlkw
        "prev_permutation"         stlkw
        "priority_queue"           stlkw
        "ptr_fun"              stlkw
        "push_heap"            stlkw
        "queue"                stlkw
        "random_shuffle"           stlkw
        "raw_storage_iterator"         stlkw
        "remove"               stlkw
        "remove_copy"              stlkw
        "remove_copy_if"           stlkw
        "remove_if"            stlkw
        "replace"              stlkw
        "replace_copy"             stlkw
        "replace_copy_if"          stlkw
        "replace_if"               stlkw
        "return_temporary_buffer"      stlkw
        "reverse"              stlkw
        "reverse_bidirectional_iterator"   stlkw
        "reverse_copy"             stlkw
        "reverse_iterator"         stlkw
        "rotate"               stlkw
        "rotate_copy"              stlkw
        "search"               stlkw
        "search_n"             stlkw
        "set"                  stlkw
        "set_difference"           stlkw
        "set_intersection"         stlkw
        "set_symmetric_difference"     stlkw
        "set_union"            stlkw
        "sort"                 stlkw
        "sort_heap"            stlkw
        "stable_partition"         stlkw
        "stable_sort"              stlkw
        "stack"                stlkw
        "string"               stlkw
        "string_char_traits"           stlkw
        "swap"                 stlkw
        "swap_ranges"              stlkw
        "times"                stlkw
        "transform"            stlkw
        "unary_function"           stlkw
        "unary_negate"             stlkw
        "uninitialized_copy"           stlkw
        "uninitialized_fill"           stlkw
        "uninitialized_fill_n"         stlkw
        "unique"               stlkw
        "unique_copy"              stlkw
        "upper_bound"              stlkw
        "value_type"               stlkw
        "vector"               stlkw
        "wstring"              stlkw
    "std" stlkw
    "iterator" stlkw
    "const_iterator" stlkw
    "const_reverse_iterator" stlkw
done
    "a-z$A-Z0-9_"   ident




:type CType
    *   idle noeat
:kw CKeyword
    *   idle noeat
:stlkw STLkw
    *   idle noeat
    ":" stlkw_colon recolor=-1
:stlkw_colon InvalidNumber
    *   idle noeat
    ":" was_glue recolor=-2
